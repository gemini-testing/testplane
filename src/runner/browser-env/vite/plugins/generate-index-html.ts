import path from "node:path";
import url from "node:url";
import createDebug from "debug";
import { MODULE_NAMES, WORKER_ENV_BY_RUN_UUID } from "../constants";
import { getNodeModulePath, getImportMetaUrl } from "../utils";
import logger from "../../../../utils/logger";

import type { WorkerInitializePayload } from "../browser-modules/types";
import type { Plugin } from "vite";

const debug = createDebug("vite:plugin:generateIndexHtml");

export const plugin = async (): Promise<Plugin[]> => {
    const mochaPackagePath = await getNodeModulePath({
        moduleName: "mocha",
        parent: path.join("node_modules", "testplane", "node_modules"),
    });
    const mochaModulePath = path.join(url.fileURLToPath(path.dirname(mochaPackagePath)), "mocha.js");

    const dirname = url.fileURLToPath(new URL(".", getImportMetaUrl(__filename)));
    const browserModulesPath = path.resolve(dirname, "..", "browser-modules");
    const browserRunnerModulePath = path.resolve(browserModulesPath, "index.js");
    const globalsModulePath = path.resolve(browserModulesPath, "globals.js");

    return [
        {
            name: "testplane:generateIndexHtml",
            enforce: "pre",
            configureServer(server) {
                return () => {
                    server.middlewares.use(async (req, res, next) => {
                        debug(`Received request for: ${req.originalUrl}`);

                        if (!req.url?.endsWith("index.html") || !req.originalUrl) {
                            return next();
                        }

                        const urlParsed = url.parse(req.originalUrl);
                        const urlParamString = new URLSearchParams(urlParsed.query || "");

                        try {
                            const runUuid = urlParamString.get("runUuid");
                            if (!runUuid) {
                                throw new Error(
                                    `Query parameter "runUuid" must be specified in url: ${req.originalUrl}`,
                                );
                            }

                            const env = WORKER_ENV_BY_RUN_UUID.get(runUuid);
                            if (!env) {
                                throw new Error(
                                    `Worker environment is not found by "runUuid=${runUuid}". ` +
                                        "This is possible if:\n" +
                                        '  - "runUuid" is not generated by Testplane\n' +
                                        "  - the test has already been completed\n" +
                                        "  - worker was disconnected",
                                );
                            }

                            const template = generateTemplate(env, runUuid);
                            res.end(await server.transformIndexHtml(`${req.originalUrl}`, template));
                        } catch (err) {
                            const template = generateErrorTemplate(err as Error);
                            logger.error(`Failed to render template: ${err}`);
                            res.end(await server.transformIndexHtml(`${req.originalUrl}`, template));
                        }

                        return next();
                    });
                };
            },
            resolveId: (id): string | void => {
                if (id.endsWith(MODULE_NAMES.browserRunner)) {
                    return browserRunnerModulePath;
                }

                if (id.endsWith(MODULE_NAMES.globals)) {
                    return globalsModulePath;
                }

                if (id.endsWith(MODULE_NAMES.mocha)) {
                    return mochaModulePath;
                }
            },
        },
    ];
};

function generateTemplate(env: WorkerInitializePayload, runUuid: string): string {
    return `
<!DOCTYPE html>
<html>
    <head>
        <title>Testplane Browser Test</title>
        <script type="module">
            window.__testplane__ = ${JSON.stringify({ runUuid, ...env })};
        </script>
        <script type="module" src="${MODULE_NAMES.globals}"></script>
        <script type="module" src="${MODULE_NAMES.mocha}"></script>
        <script type="module" src="${MODULE_NAMES.browserRunner}"></script>
    </head>
    <body></body>
</html>
`;
}

function generateErrorTemplate(error: Error): string {
    return `
<!DOCTYPE html>
<html>
    <body>
        <pre>${error.stack}</pre>
    </body>
</html>
`;
}
